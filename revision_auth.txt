ClickGuard - Auth Modülü Teknik Revizyon ve Yol Haritası
Belge Amacı: Bu doküman, ClickGuard platformuna modüler bir kullanıcı kimlik doğrulama ve yetkilendirme (auth) sistemi eklemek için gereken teknik revizyonları ve uygulama adımlarını detaylandırır. Amaç, mevcut tracker modülüne benzer, kendi içinde tutarlı ve yeniden kullanılabilir bir auth modülü oluşturmaktır.
1. Teknik Revizyon ve Mimari Yaklaşım
Mevcut modüler yapıyı koruyarak, projenin ana dizinine /src/modules/auth/ adında yeni bir klasör ekleyeceğiz. Bu modül, kullanıcı kaydı, girişi, oturum yönetimi ve yetkilendirme ile ilgili tüm mantığı kendi içinde barındıracaktır.
Mimari Etkileri:
1. Yeni auth Modülü: Kullanıcı yönetimiyle ilgili tüm routes, controller, service ve model dosyaları bu modülün altında yer alacak.
2. Yeni User Modeli: src/models/ dizini altında, kullanıcı bilgilerini MongoDB'de saklamak için yeni bir User.model.js oluşturulacak.
3. Yeni Genel Middleware: Diğer modüllerin (örneğin tracker modülündeki admin endpoint'leri) korunması için, gelen isteklerin geçerli bir kullanıcıya ait olup olmadığını kontrol eden merkezi bir authenticate.js middleware'i oluşturulacak.
Authentication Stratejisi:
* Kayıt/Giriş: Kullanıcıların Google hesaplarıyla tek tıkla sisteme dahil olabilmesi için Passport.js ve passport-google-oauth20 stratejisi kullanılacaktır.
* Oturum Yönetimi: Kullanıcı giriş yaptıktan sonra, sunucu bir JWT (JSON Web Token) üretecektir. Bu token, frontend'e gönderilecek ve frontend, korumalı API endpoint'lerine yapacağı her istekte bu token'ı Authorization başlığında geri gönderecektir. Bu, sunucunun her seferinde kullanıcıyı yeniden doğrulamasına gerek kalmadan oturumu sürdürmesini sağlar.
2. Uygulama Yol Haritası (Checklist)
Bu yol haritası, auth modülünün sıfırdan oluşturulup sisteme entegre edilmesini adımlara ayırır.
✅ Faz 1: Temel Kurulum ve Veritabanı Modeli
* [ ] Klasör Yapısını Oluştur: /src/modules/ altında auth adında yeni bir klasör ve içinde auth.routes.js, auth.controller.js, auth.service.js dosyalarını oluştur.
* [ ] User Modelini Tanımla: src/models/User.model.js dosyasını oluştur. Mongoose şeması içinde şu alanları tanımla:
   * googleId (String, unique)
   * email (String, unique)
   * displayName (String)
   * profilePictureUrl (String)
   * role (String, Enum: ['admin', 'user'], default: 'user')
   * createdAt, updatedAt (Timestamps)
* [ ] Gerekli Paketleri Yükle: package.json dosyasına şu bağımlılıkları ekle ve npm install komutunu çalıştır:
   * passport
   * passport-google-oauth20
   * jsonwebtoken
   * express-session (Passport'un oturumları geçici olarak yönetmesi için)
✅ Faz 2: Google ile Giriş (OAuth2) Akışını Kurma
* [ ] Passport Stratejisini Yapılandır: auth.service.js veya ayrı bir passport.config.js içinde, passport-google-oauth20 stratejisini yapılandır. Bu yapılandırma, Google'dan gelen kullanıcı profiliyle ne yapılacağını belirler:
   * Veritabanında bu googleId'ye sahip bir kullanıcı var mı?
   * Varsa, kullanıcıyı döndür.
   * Yoksa, yeni bir kullanıcı oluştur ve veritabanına kaydet, ardından yeni kullanıcıyı döndür.
* [ ] Giriş Rotalarını Oluştur: auth.routes.js içinde iki ana rota tanımla:
   * GET /auth/google: Kullanıcıyı Google'ın izin ekranına yönlendiren rota. Passport'un authenticate fonksiyonunu tetikler.
   * GET /auth/google/callback: Kullanıcı Google'da izin verdikten sonra Google'ın geri yönlendireceği rota. Bu rota, başarılı giriş sonrası JWT oluşturma adımını tetikleyecek.
✅ Faz 3: Oturum Yönetimi (JWT Entegrasyonu)
* [ ] JWT Oluşturma Mantığını Yaz: auth.controller.js içinde, /auth/google/callback rotası başarılı olduğunda çalışacak bir fonksiyon yaz. Bu fonksiyon:
   * Passport'tan gelen kullanıcı bilgisini (özellikle userId ve role) alır.
   * jsonwebtoken kütüphanesini kullanarak bu bilgileri içeren bir JWT imzalar.
   * Oluşturulan token'ı, kullanıcıyı frontend'deki özel bir "giriş başarılı" sayfasına yönlendirirken URL parametresi olarak ekler (örn: https://clickguard.app/auth/success?token=...).
* [ ] Frontend'de Token'ı Yakala ve Sakla: Frontend tarafında, bu "giriş başarılı" sayfası, URL'den token'ı okur ve tarayıcının localStorage'ına kaydeder.
✅ Faz 4: API'leri Koruma (Middleware Entegrasyonu)
* [ ] Doğrulama Middleware'ini Oluştur: /src/middleware/authenticate.js adında merkezi bir dosya oluştur. Bu middleware:
   * Gelen isteğin Authorization başlığında Bearer <token> formatında bir JWT olup olmadığını kontrol eder.
   * Token varsa, jsonwebtoken ile doğruluğunu ve geçerliliğini kontrol eder.
   * Token geçerliyse, içindeki kullanıcı bilgilerini (userId, role) req.user objesine ekler ve bir sonraki adıma (next()) geçer.
   * Token yoksa veya geçersizse, 401 Unauthorized hatası döndürür.
* [ ] Admin Rotalarını Koru: tracker modülündeki admin.routes.js dosyasını aç ve oluşturduğun bu yeni authenticate middleware'ini tüm admin rotalarının başına ekle. Bu, artık bu endpoint'lere sadece geçerli bir JWT'ye sahip kullanıcıların erişebilmesini sağlar.
Bu yol haritasını tamamladığında, mevcut modüler yapınla tamamen uyumlu, güvenli ve ölçeklenebilir bir kimlik doğrulama sistemine sahip olacaksın.