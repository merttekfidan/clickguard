ClickGuard - Agile Sprint 1 Technical Plan
Objective: To build the Minimum Viable Product (MVP) of the ClickGuard backend. The primary goal of this sprint is to successfully track clicks, enrich the data, analyze it with a core set of rules, and log the entire process. This version will use in-memory processing and will not require a database.
Starting Point: A functional tracker module that can be served and can send data to a backend endpoint.
Phase 1: Enhanced Data Collection & In-Memory Logging
Goal: Solidify the data collection process and establish a simple, in-memory logging mechanism for immediate analysis and debugging.
Task 1: Enhance the Tracker Script (clickguard-tracker.js)
* Action: Upgrade the client-side tracker to gather more signals for robust device fingerprinting.
* Implementation:
   1. In public/clickguard-tracker.js, expand the collectData function to capture:
      * Screen Resolution (window.screen.width x window.screen.height)
      * Browser Language (navigator.language)
      * Timezone (Intl.DateTimeFormat().resolvedOptions().timeZone)
      * Canvas Fingerprint: A hash generated from rendering a small, invisible 2D canvas element.
   2. This rich data object will be sent to the backend.
Task 2: Implement In-Memory Logging & Enrichment Service
* Action: Refactor the backend to handle the incoming rich data, enrich it using a free IP API, and log it to the console.
* Implementation:
   1. Modify tracker/controller.js: When a request hits POST /api/v1/tracker, it will immediately log "Raw click received" and then pass the entire request body to a new AnalysisService.
   2. Create src/services/analysis.service.js: This service will orchestrate the analysis flow. It will have a main function, processClick(rawData).
   3. IP Enrichment: Inside processClick, make a fetch call to http://ip-api.com/json/{ipAddress} using the IP from rawData. This is a simple, free way to get basic geolocation and ISP information.
   4. Combine the original rawData with the response from ip-api to create a new enrichedClick object. Log this object to the console: console.log("Enriched Click:", enrichedClick);
Phase 2: Building the Independent Rule Engine
Goal: Create the "brain" of the application as a standalone, architecturally independent module that can be tested in isolation.
Task 3: Design the Independent Rule Engine
* Action: Create the core fraud analysis service. The key principle is separation of concerns: this module must not know anything about Express, APIs, or databases. It only knows how to analyze data.
* Implementation:
   1. Create a new file: src/services/ruleEngine.service.js.
   2. The engine will expose one primary function: runRules(enrichedClick). This function takes the enrichedClick object as input.
   3. Inside this function, implement the core detection rules.
   4. The function will return a decision object, for example: { decision: 'BLOCK', reason: 'FRAUD_IP_TYPE', target: '179.81.15.20' } or { decision: 'ALLOW', reason: 'OK' }.
Task 4: Implement Core Detection Rules within the Engine
* Action: Code the initial fraud detection logic inside ruleEngine.service.js.
* Implementation:
   1. Backend Fingerprinting: Inside the analysis.service.js (before calling the rule engine), create a deviceFingerprint hash from the combined tracker signals (User-Agent, Language, Timezone, etc.). Add this fingerprint to the enrichedClick object.
   2. Rule #1 (IP Type Analysis): The runRules function will check the isp or org field from the ip-api response. If it contains keywords like "OVH", "AWS", "Google Cloud", "DigitalOcean", classify as "FRAUD_IP_TYPE".
   3. Rule #2 (Device Frequency Analysis): This requires a simple in-memory store. Create an object const fingerprintCounts = {} inside the analysis.service.js. For each click, increment the count for its fingerprint. Pass this count to the runRules function. If the count exceeds a threshold (e.g., 3), classify as "FRAUD_DEVICE_FREQUENCY".
   4. Rule #3 (CIDR Range Analysis): This also uses an in-memory store. When a click is classified as fraudulent, extract its /24 subnet. Store these subnets and their fraud counts in an object. Pass this data to the runRules function. If the fraud count for a subnet exceeds a threshold, the decision should be to block the entire CIDR range (e.g., 179.81.0.0/24).
Task 5: Complete the Logging Flow
* Action: Connect the analysis service to the rule engine and log the final result.
* Implementation:
   1. In analysis.service.js, after enriching the click and generating the fingerprint, call the rule engine: const result = ruleEngine.runRules(enrichedClick, contextData); (where contextData contains frequency counts).
   2. Log the final decision to the console: console.log("Analysis Result:", result);
This agile plan creates a fully functional end-to-end data pipeline that logs every step, allowing you to analyze and refine your detection logic with real data before building more complex infrastructure.