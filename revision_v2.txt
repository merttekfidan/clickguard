ClickGuard - V1 Technical Revision and Implementation Plan
Document ID: CGR-2025-07-02-01
Version: 1.1 (Aggressive Blocking Logic)
Subject: Integration of the new detection algorithm, named the "Smart Sledgehammer Model," into the existing software architecture.
1. Purpose and Rationale for Revision
This revision aims to upgrade ClickGuard's V1 detection algorithm to the "Smart Sledgehammer Model," a more decisive and proactive blocking strategy. The previous model focused solely on blocking individual suspicious IP addresses. The new model, however, analyzes the source of a threat (e.g., data center, VPN network) to proactively neutralize the entire network from which the threat originates, not just a single IP.
This change is made in response to the user's request for a more aggressive and comprehensive protection strategy. The goal is to stop threats at their source and render an attacker's ability to switch IP addresses meaningless.
2. Impact on Existing Architecture
This revision will affect the core components of the modular architecture previously outlined in DOCUMENTATION.md.
* Rule Engine: This is where the most significant change will occur. The existing simple rules will be replaced with a hierarchical logic that makes different blocking decisions (/16 or /32) based on the IP type. This logic should likely be created as a new ruleEngine.service.js file under src/services/.
* IP Reputation Service: The role of this service becomes even more critical. It is no longer sufficient to answer "is it suspicious?". It is now mandatory that it returns a clear type for the IP address (Hosting/Data Center, Residential, Mobile, VPN, Proxy). This will determine which blocking strategy the Rule Engine selects.
* Google Ads API Client (src/modules/google-ads/api/): The IP blocking function must be updated. It must now be able to accept not only a single IP address (1.2.3.4) but also a CIDR block (1.2.3.0/24 or 1.2.3.0/16) as a parameter and add it to the Google Ads exclusion list.
* Database Models (src/models/): We will need to update our data structure for reporting and tracking according to this new logic.
   * A new field should be added to the ClickLogs table to store the ip_type (e.g., 'VPN') returned from the IP Reputation service.
   * New fields should be added to the BlockedIPs table to store the type of block performed (/16 or /32) and the blocked CIDR block itself.
3. Step-by-Step Implementation Plan
This plan lists the step-by-step changes required in the existing codebase.
Step 1: Update Database Models
1. Modify ClickLogs Model:
   * Add a STRING field named ip_type. This field will store values like 'Hosting', 'VPN', 'Residential' returned from the IP Reputation service.
2. Modify BlockedIPs Model:
   * Rename the ip_address field to blocked_entry. This field can now hold both a single IP and a CIDR block.
   * Add an ENUM field named block_type. Its values: IP_ADDRESS and IP_BLOCK.
   * Expand the value set of the reason field. It should now include reasons like Data Center Detected, VPN Detected in addition to High Frequency.
Step 2: Enhance the IP Reputation Service
1. File: src/services/ipReputation.service.js (Create if it doesn't exist)
2. Logic: This service should contain a function that makes a request to the external API (e.g., ip-api.com, IPQualityScore), extracts only the necessary information from the response, and returns it in a standard format.
   * Function: getIpInfo(ipAddress)
   * Return Value (Example): { type: 'Hosting', isp: 'OVH SAS', country: 'Poland' }
Step 3: Rewrite the Rule Engine
1. File: src/services/ruleEngine.service.js (Create)
2. Logic: This file should contain a single main function that implements the logic of the "Smart Sledgehammer Model".
   * Function: evaluateClick(clickData, ipInfo)
   * Workflow:
a. Check the ipInfo.type value. If it is Hosting, VPN, or Proxy, return an object like { decision: 'BLOCK', blockType: '/16', reason: 'Data Center Detected' }.
b. If ipInfo.type is Residential or Mobile, query the database for the number of clicks from this IP in the last 5 minutes.
c. If the click count is > 3, return an object like { decision: 'BLOCK', blockType: '/32', reason: 'High Frequency' }.
d. If no rules are triggered, return { decision: 'ALLOW', reason: 'Legitimate' }.
Step 4: Update the Google Ads Service
   1. File: src/modules/google-ads/service.js
   2. Logic: Update the IP blocking function to accept both a single IP and a CIDR block.
   * Function: blockIpEntry(customerId, campaignId, entry)
   * Workflow: This function should check if the entry parameter is a CIDR block (does it contain a /?) and send the request to the Google Ads API in the appropriate format.
Step 5: Integrate the Main Workflow (Worker)
   1. File: src/workers/clickProcessor.worker.js (Update if it exists, otherwise create)
   2. Logic: This worker manages the entire process.
a. It receives the click data from the tracker.
b. It calls ipReputation.service.js to enrich the IP information.
c. It sends the enriched data to ruleEngine.service.js to get a decision.
d. If the decision includes decision: 'BLOCK', it calls googleAds.service.js to perform the blocking action.
e. It logs all steps and results to the database.
This revision plan provides a solid and actionable roadmap to elevate your project to a more aggressive and intelligent level of protection.